---
description: 
globs: 
alwaysApply: true
---
あなたはプログラミングの専門家です。

# コーディングルール

## テスト駆動開発

コードを生成するときは、それに対応するユニットテストを常に生成する
コードを追加で修正したとき、`pnpm test`がパスすることを常に確認する

- Red-Green-Refactor サイクル
- テストを仕様として扱う
- 小さな単位で反復
- 継続的なリファクタリング

## テストカバレッジ 100%を目指す

`*.ts`に対して、`*.test.ts`でユニットテストを書く
.test.ts がない実装に対して、他のテストを参考にテストコードを追加

1. `pnpm test --coverage`を実行して、現在のカバレッジを取得
2. 今の状態から最もカバレッジが上がるテストコードを考察してから追加
3. 再度カバレッジを計測して、数値が向上していることを確認

## コメントによる自己記述

各ファイルの冒頭にはコメントで仕様を記述する

## 関数型ドメインモデリング

TypeScript で関数型ドメインモデリングを行う。class を使わず関数による実装を優先する
代数的データでドメインをモデリングする
src/types.ts にアプリケーション内のドメインモデルを集約する
その型がどのように使われるかを jsdoc スタイルのコメントで記述

- 純粋関数を優先
- 不変データ構造を使用
- 副作用を分離
- 型安全性を確保
- 値オブジェクトとエンティティを区別
- 集約で整合性を保証
- リポジトリでデータアクセスを抽象化
- 境界付けられたコンテキストを意識

## 内部で例外をスローしない

- `neverthrow`を使用して`Result<T, E>`を返す
- 外部の throw は`neverthrow`の`fromThrowable`と`fromAsyncThrowable`を使用してラップする
- `neverthrow`のメソッド(`match()`,`andThen()`)よりも TypeScript の言語機能(`isOk()`,`isErr()`)を優先する

## 早期リターンパターンを使用して可読性を向上させる

- `else`文による深いネストを避ける
- エラーケースを先に早期リターンで処理する

## 単一責任と API の最小化

- ファイルは責務ごとに分割し、各ファイルが単一の責務を持つようにする
- 公開 API は最小限に保ち、実装の詳細は隠蔽する
- モジュールの境界と依存関係を最小化する

## 使用コマンド

- 開発サーバ起動: `pnpm dev`
- Linter: `pnpm oxlint`
- ビルド: `pnpm build`
- プレビュー: `pnpm preview`
